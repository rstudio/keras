# Generated by roxygen2: do not edit by hand

S3method(as.data.frame,keras_training_history)
S3method(plot,keras_training_history)
S3method(predict,keras.engine.training.Model)
S3method(print,keras_training_history)
S3method(py_str,keras.engine.training.Model)
S3method(summary,keras.engine.training.Model)
export("%>%")
export(KerasCallback)
export(KerasLayer)
export(activation_elu)
export(activation_hard_sigmoid)
export(activation_linear)
export(activation_relu)
export(activation_selu)
export(activation_sigmoid)
export(activation_softmax)
export(activation_softplus)
export(activation_softsign)
export(activation_tanh)
export(application_inception_v3)
export(application_mobilenet)
export(application_resnet50)
export(application_vgg16)
export(application_vgg19)
export(application_xception)
export(backend)
export(bidirectional)
export(callback_csv_logger)
export(callback_early_stopping)
export(callback_lambda)
export(callback_learning_rate_scheduler)
export(callback_model_checkpoint)
export(callback_progbar_logger)
export(callback_reduce_lr_on_plateau)
export(callback_remote_monitor)
export(callback_tensorboard)
export(callback_terminate_on_naan)
export(clone_model)
export(compile)
export(constraint_maxnorm)
export(constraint_minmaxnorm)
export(constraint_nonneg)
export(constraint_unitnorm)
export(count_params)
export(create_layer)
export(dataset_boston_housing)
export(dataset_cifar10)
export(dataset_cifar100)
export(dataset_imdb)
export(dataset_mnist)
export(dataset_reuters)
export(dataset_reuters_word_index)
export(evaluate)
export(evaluate_generator)
export(fit)
export(fit_generator)
export(fit_image_data_generator)
export(fit_text_tokenizer)
export(flag_boolean)
export(flag_integer)
export(flag_numeric)
export(flag_string)
export(flags)
export(flow_images_from_data)
export(flow_images_from_directory)
export(from_config)
export(get_config)
export(get_file)
export(get_input_at)
export(get_input_mask_at)
export(get_input_shape_at)
export(get_layer)
export(get_output_at)
export(get_output_mask_at)
export(get_output_shape_at)
export(get_weights)
export(hdf5_matrix)
export(image_data_generator)
export(image_load)
export(image_to_array)
export(imagenet_decode_predictions)
export(imagenet_preprocess_input)
export(implementation)
export(inception_v3_preprocess_input)
export(initializer_constant)
export(initializer_glorot_normal)
export(initializer_glorot_uniform)
export(initializer_he_normal)
export(initializer_he_uniform)
export(initializer_identity)
export(initializer_lecun_normal)
export(initializer_lecun_uniform)
export(initializer_ones)
export(initializer_orthogonal)
export(initializer_random_normal)
export(initializer_random_uniform)
export(initializer_truncated_normal)
export(initializer_variance_scaling)
export(initializer_zeros)
export(install_keras)
export(is_keras_available)
export(keras_array)
export(keras_model)
export(keras_model_sequential)
export(layer_activation)
export(layer_activation_elu)
export(layer_activation_leaky_relu)
export(layer_activation_parametric_relu)
export(layer_activation_thresholded_relu)
export(layer_activity_regularization)
export(layer_add)
export(layer_alpha_dropout)
export(layer_average)
export(layer_average_pooling_1d)
export(layer_average_pooling_2d)
export(layer_average_pooling_3d)
export(layer_batch_normalization)
export(layer_concatenate)
export(layer_conv_1d)
export(layer_conv_2d)
export(layer_conv_2d_transpose)
export(layer_conv_3d)
export(layer_conv_3d_transpose)
export(layer_conv_lstm_2d)
export(layer_cropping_1d)
export(layer_cropping_2d)
export(layer_cropping_3d)
export(layer_dense)
export(layer_dot)
export(layer_dropout)
export(layer_embedding)
export(layer_flatten)
export(layer_gaussian_dropout)
export(layer_gaussian_noise)
export(layer_global_average_pooling_1d)
export(layer_global_average_pooling_2d)
export(layer_global_average_pooling_3d)
export(layer_global_max_pooling_1d)
export(layer_global_max_pooling_2d)
export(layer_global_max_pooling_3d)
export(layer_gru)
export(layer_input)
export(layer_lambda)
export(layer_locally_connected_1d)
export(layer_locally_connected_2d)
export(layer_lstm)
export(layer_masking)
export(layer_max_pooling_1d)
export(layer_max_pooling_2d)
export(layer_max_pooling_3d)
export(layer_maximum)
export(layer_multiply)
export(layer_permute)
export(layer_repeat_vector)
export(layer_reshape)
export(layer_separable_conv_2d)
export(layer_simple_rnn)
export(layer_spatial_dropout_1d)
export(layer_spatial_dropout_2d)
export(layer_spatial_dropout_3d)
export(layer_subtract)
export(layer_upsampling_1d)
export(layer_upsampling_2d)
export(layer_upsampling_3d)
export(layer_zero_padding_1d)
export(layer_zero_padding_2d)
export(layer_zero_padding_3d)
export(load_model_hdf5)
export(load_model_weights_hdf5)
export(loss_binary_crossentropy)
export(loss_categorical_crossentropy)
export(loss_categorical_hinge)
export(loss_cosine_proximity)
export(loss_hinge)
export(loss_kullback_leibler_divergence)
export(loss_logcosh)
export(loss_mean_absolute_error)
export(loss_mean_absolute_percentage_error)
export(loss_mean_squared_error)
export(loss_mean_squared_logarithmic_error)
export(loss_poisson)
export(loss_sparse_categorical_crossentropy)
export(loss_squared_hinge)
export(make_sampling_table)
export(metric_binary_accuracy)
export(metric_binary_crossentropy)
export(metric_categorical_accuracy)
export(metric_categorical_crossentropy)
export(metric_cosine_proximity)
export(metric_hinge)
export(metric_kullback_leibler_divergence)
export(metric_mean_absolute_error)
export(metric_mean_absolute_percentage_error)
export(metric_mean_squared_error)
export(metric_mean_squared_logarithmic_error)
export(metric_poisson)
export(metric_sparse_categorical_crossentropy)
export(metric_sparse_top_k_categorical_accuracy)
export(metric_squared_hinge)
export(metric_top_k_categorical_accuracy)
export(mobilenet_decode_predictions)
export(mobilenet_load_model_hdf5)
export(mobilenet_preprocess_input)
export(model_from_json)
export(model_from_yaml)
export(model_to_estimator)
export(model_to_json)
export(model_to_yaml)
export(normalize)
export(optimizer_adadelta)
export(optimizer_adagrad)
export(optimizer_adam)
export(optimizer_adamax)
export(optimizer_nadam)
export(optimizer_rmsprop)
export(optimizer_sgd)
export(pad_sequences)
export(pop_layer)
export(predict_classes)
export(predict_generator)
export(predict_on_batch)
export(predict_proba)
export(regularizer_l1)
export(regularizer_l1_l2)
export(regularizer_l2)
export(reset_states)
export(run_dir)
export(save_model_hdf5)
export(save_model_weights_hdf5)
export(sequences_to_matrix)
export(serialize_model)
export(set_weights)
export(skipgrams)
export(tensorboard)
export(test_on_batch)
export(text_hashing_trick)
export(text_one_hot)
export(text_to_word_sequence)
export(text_tokenizer)
export(texts_to_matrix)
export(texts_to_sequences)
export(texts_to_sequences_generator)
export(time_distributed)
export(to_categorical)
export(train_on_batch)
export(unserialize_model)
export(use_condaenv)
export(use_python)
export(use_session_with_seed)
export(use_virtualenv)
export(xception_preprocess_input)
import(R6)
import(magrittr)
import(methods)
importFrom(graphics,par)
importFrom(graphics,plot)
importFrom(graphics,points)
importFrom(reticulate,conda_binary)
importFrom(reticulate,dict)
importFrom(reticulate,import)
importFrom(reticulate,import_from_path)
importFrom(reticulate,iterate)
importFrom(reticulate,py_available)
importFrom(reticulate,py_call)
importFrom(reticulate,py_capture_output)
importFrom(reticulate,py_get_attr)
importFrom(reticulate,py_has_attr)
importFrom(reticulate,py_is_null_xptr)
importFrom(reticulate,py_iterator)
importFrom(reticulate,py_str)
importFrom(reticulate,py_to_r)
importFrom(reticulate,r_to_py)
importFrom(reticulate,tuple)
importFrom(reticulate,use_condaenv)
importFrom(reticulate,use_python)
importFrom(reticulate,use_virtualenv)
importFrom(stats,predict)
importFrom(tensorflow,install_tensorflow)
importFrom(tensorflow,tensorboard)
importFrom(tensorflow,tf_config)
importFrom(tensorflow,tf_version)
importFrom(tensorflow,use_session_with_seed)
importFrom(tfruns,flag_boolean)
importFrom(tfruns,flag_integer)
importFrom(tfruns,flag_numeric)
importFrom(tfruns,flag_string)
importFrom(tfruns,flags)
importFrom(tfruns,run_dir)
